
### Type Script

    ReturnType<Type> - Создает тип, состоящий из возвращаемого типа функции Type.
    Partial<Type> - делает все ключи НЕ обязательными
    Required<Type> - делает все ключи Обязательными
    Readonly<Type> - только на один уровень вложенности
    Record<Keys, Type> - cоздаёт тип объекта, ключами свойств которого являются Keys, а значениями свойств являются Type
    Pick<Type, Keys> - выбирает набор свойств Keys
    Omit<Type, Keys> - выбирает все свойства Type и затем удаляя Keys
    Exclude<UnionType, ExcludedMembers> - исключает повторения
    NonNullable<Type> - исключает null и undefined из Type.
    Parameters<Type> - создает тип кортежа из типов, используемых в параметрах типа функции Type.
    ...
    дальше утилиты для классов

    # Typescript является языком со статической типизацией. Тип не может быть изменен в ходе выполнения программы

    inteface и type взаимозаменяемые, только в interface нельзя создать тип из примитивов. typ A = '1' | '2'
    inteface не может описать тип кортежа | Tuple
    inteface  не может создать Union тип. т.е. type A, type B and type C = A | B
    НО inteface расширяется а type нет

    итого inteface можно использовать для объектов приходящих по API,
    а type в частных случаях: type Nullable<T> = T | null | undefibed
























React-Redux все хуки
все хуки и API Redux
Патерны проектирования, основные
Контекст функции, aplly, binde,
FLUX
Алгоритмические задачи.

знаю теорию
SOLID
Vanila JS
прототип наследования
Методы жизненного цикла компонент
что происходит после ввода в строку поиска
ООП (Классы, как это реализованно, proto prototype)
REST
Приведение типов

только слышал
Клиент-серверная-архитектура
графQL
Sagi
