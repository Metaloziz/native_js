[{"D:\\Git\\repositories\\native_js\\src\\index.tsx":"1","D:\\Git\\repositories\\native_js\\src\\redux\\state.ts":"2","D:\\Git\\repositories\\native_js\\src\\App.tsx":"3","D:\\Git\\repositories\\native_js\\src\\redux\\currencyReducer.ts":"4","D:\\Git\\repositories\\native_js\\src\\lessons\\lesson5\\HomeWork5.tsx":"5","D:\\Git\\repositories\\native_js\\src\\redux\\actions.ts":"6","D:\\Git\\repositories\\native_js\\src\\lessons\\lesson6\\HomeWork6.tsx":"7"},{"size":319,"mtime":1646302492988,"results":"8","hashOfConfig":"9"},{"size":286,"mtime":1646302493035,"results":"10","hashOfConfig":"9"},{"size":656,"mtime":1646803536384,"results":"11","hashOfConfig":"9"},{"size":1957,"mtime":1646302493035,"results":"12","hashOfConfig":"9"},{"size":13464,"mtime":1646743168012,"results":"13","hashOfConfig":"9"},{"size":2201,"mtime":1646302493035,"results":"14","hashOfConfig":"9"},{"size":10022,"mtime":1646806547566,"results":"15","hashOfConfig":"9"},{"filePath":"16","messages":"17","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},"16o24bd",{"filePath":"19","messages":"20","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},{"filePath":"21","messages":"22","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"23","messages":"24","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},{"filePath":"25","messages":"26","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"27","messages":"28","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},{"filePath":"29","messages":"30","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"31"},"D:\\Git\\repositories\\native_js\\src\\index.tsx",[],["32","33"],"D:\\Git\\repositories\\native_js\\src\\redux\\state.ts",[],"D:\\Git\\repositories\\native_js\\src\\App.tsx",[],"D:\\Git\\repositories\\native_js\\src\\redux\\currencyReducer.ts",[],"D:\\Git\\repositories\\native_js\\src\\lessons\\lesson5\\HomeWork5.tsx",[],"D:\\Git\\repositories\\native_js\\src\\redux\\actions.ts",[],"D:\\Git\\repositories\\native_js\\src\\lessons\\lesson6\\HomeWork6.tsx",["34","35","36","37"],"import React from 'react'\r\n\r\n\r\nexport const HomeWork6 = () => {\r\n\r\n// Class\r\n// https://learn.javascript.ru/classes\r\n// https://medium.com/front-stories/%D0%BA%D0%B0%D0%BA-%D1%80%D0%B0%D0%B1%D0%BE%D1%82%D0%B0%D1%8E%D1%82-%D0%BA%D0%BB%D0%B0%D1%81%D1%81%D1%8B-%D0%B2-javascript-7978c0003f1d\r\n// https://www.typescriptlang.org/docs/handbook/classes.html\r\n// https://www.youtube.com/watch?v=BASquaxab_w\r\n// https://www.youtube.com/watch?v=uLY9GXGMXaA\r\n\r\n// Task 01\r\n// Создайте структуру с именем student, содержащую поля: имя и фамилия, номер группы, успеваемость (массив из пяти элементов).\r\n// Создать массив из десяти элементов такого типа, упорядочить записи по возрастанию среднего балла.\r\n// Добавить возможность вывода фамилий и номеров групп студентов, имеющих оценки, равные только 4 или 5.\r\n//\r\n  type StudentType = {\r\n    name: string\r\n    secondName: string\r\n    group: number\r\n    marks: NumberType []\r\n  }\r\n\r\n  type NumberType = 1 | 2 | 3 | 4 | 5\r\n\r\n  class Student {\r\n    name\r\n    secondName\r\n    group\r\n    marks\r\n\r\n    constructor({name, secondName, group, marks}: StudentType) {\r\n      this.name = name\r\n      this.secondName = secondName\r\n      this.group = group\r\n      this.marks = marks\r\n    }\r\n\r\n    mySecondName() {\r\n      console.log(this.name + ' ' + this.secondName + ' ' + this.group)\r\n    }\r\n  }\r\n\r\n  // @ts-ignore\r\n  window.newObj = new Student({\r\n    name: \"Andrew\",\r\n    secondName: \"G\",\r\n    group: 3,\r\n    marks: [3, 3, 3, 3, 4]\r\n  })\r\n\r\n  let group = [\r\n    new Student({\r\n      name: \"Mark\",\r\n      secondName: \"AAA\",\r\n      group: 48,\r\n      marks: [5, 5, 5, 4, 5]\r\n    }),\r\n    new Student({\r\n      name: \"Andrew\",\r\n      secondName: \"GGG\",\r\n      group: 48,\r\n      marks: [3, 3, 3, 3, 4]\r\n    }),\r\n    new Student({\r\n      name: \"Kate\",\r\n      secondName: \"UUU\",\r\n      group: 48,\r\n      marks: [4, 4, 4, 5, 4]\r\n    })]\r\n\r\n  console.log(group)\r\n\r\n  group.forEach((el) => {\r\n\r\n    let result = el.marks.filter(mark => mark >= 4)\r\n\r\n    if (result.length > 4) {\r\n      el.mySecondName()\r\n    }\r\n  })\r\n\r\n\r\n// Task 02\r\n// Создать класс с двумя переменными. Добавить конструктор с входными параметрами и инициализирующий члены класса по умолчанию.\r\n// Можно ли создать метод на экземпляре класса который будет удалять сам экземпляр класса? // нельзя\r\n// Можно ли создать метод класса который будет удалять экземпляр класса?\r\n\r\n  //\r\n  // class AnyClass {\r\n  //   id: number | null\r\n  //   title: string | null\r\n  //\r\n  //   constructor(id = 10, title = 'string') {\r\n  //     this.id = id\r\n  //     this.title = title\r\n  //   }\r\n  //\r\n  //   delete() {\r\n  //     this.id = null\r\n  //     return this\r\n  //   }\r\n  //\r\n  // }\r\n  //\r\n  // let newClass = new AnyClass()\r\n  //\r\n  // newClass = null\r\n  // console.log(newClass)\r\n  //\r\n  //\r\n  // // @ts-ignore\r\n  // newClass.kamikadze = () => {\r\n  // }\r\n\r\n  // console.log(newClass)\r\n\r\n\r\n// Task 03\r\n// Составить описание класса для представления времени. Предусмотреть возможности установки времени и изменения его отдельных\r\n// полей (час, минута, секунда) с проверкой допустимости вводимых значений. В случае недопустимых значений полей выбрасываются исключения.\r\n// Создать методы изменения времени на заданное количество часов, минут и секунд.\r\n// Создать метод выводящий время в строке формата HH:MM:SS\r\n// Создать класс по вышеуказанному описанию\r\n\r\n  //\r\n  type newTime = {\r\n    sec: number\r\n    min: number\r\n    hou: number\r\n  }\r\n\r\n  class Time {\r\n    sec: number = 0\r\n    min: number = 0\r\n    hou: number = 0\r\n    //\r\n    // constructor(sec?: number, min?: number, hou?: number) {\r\n    //   this.sec = sec\r\n    //   this.min = min\r\n    //   this.hou = hou\r\n    // }\r\n\r\n    setTime(hou: number = this.hou, min: number = this.min, sec: number = this.sec) {\r\n      if (sec < 60) {\r\n        this.sec = sec\r\n      } else {\r\n        console.warn('sec must be less 60')\r\n      }\r\n      if (min < 60) {\r\n        this.min = min\r\n      } else {\r\n        console.warn('min must be less 60')\r\n      }\r\n      if (hou <= 24) {\r\n        this.hou = hou\r\n      } else {\r\n        console.warn('hou must be less 60')\r\n      }\r\n    }\r\n\r\n    showTime() {\r\n      let sec: string = ''\r\n      if (this.sec < 10) {\r\n        sec = '0' + this.sec\r\n      }\r\n\r\n      let min: string = ''\r\n      if (this.min < 10) {\r\n        min = '0' + this.min\r\n      }\r\n\r\n      let hou: string = ''\r\n      if (this.hou < 10) {\r\n        hou = '0' + this.hou\r\n      }\r\n      console.log(hou + '.' + min + '.' + sec)\r\n    }\r\n  }\r\n\r\n  // @ts-ignore\r\n  // window.time = new Time(22, 10, 10)\r\n  // console.log(new Time(22, 10, 10))?\r\n//class Clock {\r\n//     private date: Date\r\n//     private hours: number\r\n//     private minutes: number\r\n//     private seconds: number\r\n//\r\n//     constructor() {\r\n//         this.date = new Date()\r\n//         this.hours = this.date.getHours()\r\n//         this.minutes = this.date.getMinutes()\r\n//         this.seconds = this.date.getSeconds()\r\n//     }\r\n//\r\n//     private translate(method: number) {\r\n//         if (method < 10) {\r\n//             return '0' + method\r\n//         }\r\n//         return method\r\n//     }\r\n//\r\n//     public setHours(hours: number, minutes: number\r\n  // public\r\n  //   getTime()\r\n  //   {\r\n  //     return `${this.translate(this.hours)}:${this.translate(this.minutes)}:${this.translate(this.seconds)}`\r\n  //   }\r\n  // }\r\n\r\n// Task 04\r\n// Класс Покупатель: Фамилия, Имя, Адрес, Номер банковского счета;\r\n// Методы: установка значений атрибутов, получение значений атрибутов, вывод информации.\r\n// Создать массив объектов данного класса.\r\n// Вывести список покупателей в алфавитном порядке и список покупателей, у которых номер кредитной карточки находится в заданном диапазоне.\r\n\r\n//   class Customer {\r\n//     name: string = ''\r\n//     secondName: string = ''\r\n//     address: string = ''\r\n//     numberCard: number = 0\r\n//\r\n//     constructor(name: string, secondName: string, address: string, numberCard: number) {\r\n//       this.name = name\r\n//       this.secondName = secondName\r\n//       this.address = address\r\n//       this.numberCard = numberCard\r\n//     }\r\n//\r\n//     setName(value: string) {\r\n//       this.name = value\r\n//     }\r\n//\r\n//     setSecondName(value: string) {\r\n//       this.secondName = value\r\n//     }\r\n//\r\n//     setAddress(value: string) {\r\n//       this.address = value\r\n//     }\r\n//\r\n//     setNumberCard(value: number) {\r\n//       this.numberCard = value\r\n//     }\r\n//\r\n//     getInformation() {\r\n//       console.log({\r\n//         name: this.name,\r\n//         secondName: this.secondName,\r\n//         address: this.address,\r\n//         numberCard: this.numberCard,\r\n//       })\r\n//     }\r\n//   }\r\n//\r\n//   let arr = [\r\n//     new Customer('Andrew', 'donkey', 'Minsk', 10),\r\n//     new Customer('Clen', 'Melt', 'Minsk', 11),\r\n//     new Customer('Wen', 'bottle', 'Minsk', 12),\r\n//     new Customer('Bob', 'pain', 'Minsk', 14),\r\n//   ]\r\n//\r\n//   // @ts-ignore\r\n//   let result = arr\r\n//     .sort((a, b) => a.name > b.name ? -1 : 1)\r\n//     .filter((el) => el.numberCard > 10 && el.numberCard < 14)\r\n//\r\n//   console.log(result)\r\n//\r\n// // @ts-ignore\r\n//   window.newCustomer = new Customer()\r\n\r\n\r\n// Task 05\r\n// Создать класс машина - имеющий марку, число цилиндров, мощность. Определить конструктор и функцию печати.\r\n// Создать производный класс – грузовик, имеющий грузоподъемность кузова.\r\n// Определить функции переназначения марки и грузоподъемности.\r\n\r\n  class Car {\r\n\r\n    mark: string\r\n    rounds: number\r\n\r\n    constructor(mark: string, rounds: number) {\r\n      this.mark = mark\r\n      this.rounds = rounds\r\n    }\r\n\r\n    showInfo() {\r\n      console.log(this)\r\n    }\r\n\r\n  }\r\n\r\n  // // @ts-ignore\r\n  // window.Car = new Car('Audi', 10, 700)\r\n  //\r\n  // class BigCar extends Car {\r\n  //\r\n  //   // weigth: number\r\n  //   rounds: number\r\n  //\r\n  //   constructor(mark: string, rounds: number, private readonly weigth: number) {\r\n  //     super(mark, rounds);\r\n  //     this.weigth = weigth\r\n  //     this.rounds = rounds\r\n  //   }\r\n  //\r\n  //   getWeigth() {\r\n  //     return this.weigth\r\n  //   }\r\n  // }\r\n  //\r\n  //\r\n  // // console.log(new BigCar('MAZ', 8, 1000))\r\n  //\r\n  // // @ts-ignore\r\n  // window.MAZ = new BigCar('MAZ', 8, 1000)\r\n\r\n// just a plug\r\n\r\n\r\n  class Test {\r\n    constructor(private name: string, public age: number) {\r\n\r\n    }\r\n\r\n    sayName() {\r\n      console.log(this.name);\r\n      this.sayYo();\r\n    }\r\n\r\n    private sayYo() {\r\n      console.log('YoYoYo');\r\n    }\r\n\r\n    protected sayBla() {\r\n      console.log('Bla Bla Bla');\r\n    }\r\n\r\n    private a = () => {\r\n    }\r\n  }\r\n\r\n  let obj = new Test('Yo', 20);\r\n  // console.log(obj)\r\n\r\n  // obj.sayName()\r\n\r\n  return (\r\n    <h2>\r\n      LESSON 6\r\n    </h2>\r\n  );\r\n}\r\n\r\n",{"ruleId":"38","replacedBy":"39"},{"ruleId":"40","replacedBy":"41"},{"ruleId":"42","severity":1,"message":"43","line":128,"column":8,"nodeType":"44","messageId":"45","endLine":128,"endColumn":15},{"ruleId":"42","severity":1,"message":"46","line":134,"column":9,"nodeType":"44","messageId":"45","endLine":134,"endColumn":13},{"ruleId":"42","severity":1,"message":"47","line":281,"column":9,"nodeType":"44","messageId":"45","endLine":281,"endColumn":12},{"ruleId":"42","severity":1,"message":"48","line":347,"column":7,"nodeType":"44","messageId":"45","endLine":347,"endColumn":10},"no-native-reassign",["49"],"no-negated-in-lhs",["50"],"@typescript-eslint/no-unused-vars","'newTime' is defined but never used.","Identifier","unusedVar","'Time' is defined but never used.","'Car' is defined but never used.","'obj' is assigned a value but never used.","no-global-assign","no-unsafe-negation"]