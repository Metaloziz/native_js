[{"C:\\Repository\\native_js\\src\\index.tsx":"1","C:\\Repository\\native_js\\src\\redux\\state.ts":"2","C:\\Repository\\native_js\\src\\App.tsx":"3","C:\\Repository\\native_js\\src\\redux\\currencyReducer.ts":"4","C:\\Repository\\native_js\\src\\lessons\\lesson1\\lesson1.tsx":"5","C:\\Repository\\native_js\\src\\redux\\actions.ts":"6","C:\\Repository\\native_js\\src\\containers\\CurrencyExchangeContainer\\CurrencyEContainer.tsx":"7","C:\\Repository\\native_js\\src\\redux\\selectors.ts":"8","C:\\Repository\\native_js\\src\\components\\CurrencyExchange\\CurrencyExchange.tsx":"9"},{"size":319,"mtime":1609752860000,"results":"10","hashOfConfig":"11"},{"size":286,"mtime":1609751766000,"results":"12","hashOfConfig":"11"},{"size":613,"mtime":1641707525936,"results":"13","hashOfConfig":"11"},{"size":1901,"mtime":1641717656979,"results":"14","hashOfConfig":"11"},{"size":860,"mtime":1609756876000,"results":"15","hashOfConfig":"11"},{"size":2201,"mtime":1641716866825,"results":"16","hashOfConfig":"11"},{"size":6131,"mtime":1641718488341,"results":"17","hashOfConfig":"11"},{"size":110,"mtime":1641718488337,"results":"18","hashOfConfig":"11"},{"size":3871,"mtime":1609757734000,"results":"19","hashOfConfig":"11"},{"filePath":"20","messages":"21","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1d1oow4",{"filePath":"22","messages":"23","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"24","messages":"25","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"26","messages":"27","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"28"},{"filePath":"29","messages":"30","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"31","messages":"32","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"33","messages":"34","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"35"},{"filePath":"36","messages":"37","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"38","messages":"39","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Repository\\native_js\\src\\index.tsx",[],"C:\\Repository\\native_js\\src\\redux\\state.ts",[],"C:\\Repository\\native_js\\src\\App.tsx",[],"C:\\Repository\\native_js\\src\\redux\\currencyReducer.ts",["40","41"],"import {ACTIONS_TYPE, CurrencyReducersTypes} from './actions';\r\n\r\n\r\nexport type CurrencyType = {\r\n    currencyName: string;\r\n    buyRate: number;\r\n    sellRate: number;\r\n};\r\nexport type CurrencyState = {\r\n    currencies: Array<CurrencyType>;\r\n    currentCurrency: string;\r\n    isBuying: boolean;\r\n    amountOfBYN: string;\r\n    amountOfCurrency: string;\r\n};\r\n\r\nconst initialState: CurrencyState = {\r\n    currencies: [\r\n        {\r\n            currencyName: 'USD',\r\n            buyRate: 2.62,\r\n            sellRate: 2.58,\r\n        },\r\n        {\r\n            currencyName: 'EUR',\r\n            buyRate: 3.1,\r\n            sellRate: 3.06,\r\n        },\r\n        {\r\n            currencyName: 'RUR',\r\n            buyRate: 0.0345,\r\n            sellRate: 0.0341,\r\n        },\r\n    ],\r\n    currentCurrency: 'USD',\r\n    isBuying: true,\r\n    amountOfBYN: '',\r\n    amountOfCurrency: '',\r\n};\r\n\r\nexport const currencyReducer = (state: CurrencyState = initialState, action: CurrencyReducersTypes): CurrencyState => {\r\n\r\n    switch (action.type) {\r\n        case ACTIONS_TYPE.CHANGE_CURRENCY_FIELD_TYPE:\r\n        // Зануляем  amountOfBYN, amountOfCurrency для коректного расчета при смене напраления\r\n        case ACTIONS_TYPE.CHANGE_CHANGE_ACTION:\r\n        // Зануляем  amountOfBYN, amountOfCurrency для коректного расчета при смене напраления\r\n        case ACTIONS_TYPE.CHANGE_CURRENT_CURRENCY:\r\n            return {\r\n                ...state,\r\n                ...action.payload,\r\n            };\r\n        // case ACTIONS_TYPE.CHANGE_CHANGE_ACTION:\r\n        //     return {\r\n        //         ...state,\r\n        //         //@ts-ignore\r\n        //         ...action.payload,\r\n        //         amountOfBYN: '',\r\n        //         amountOfCurrency: '',\r\n        //     };\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n","C:\\Repository\\native_js\\src\\lessons\\lesson1\\lesson1.tsx",[],"C:\\Repository\\native_js\\src\\redux\\actions.ts",[],"C:\\Repository\\native_js\\src\\containers\\CurrencyExchangeContainer\\CurrencyEContainer.tsx",["42","43","44"],"import React from 'react';\r\nimport CurrencyExchange from '../../components/CurrencyExchange/CurrencyExchange';\r\nimport { CurrencyState, CurrencyType } from '../../redux/currencyReducer';\r\nimport { Dispatch } from 'redux';\r\nimport {\r\n    ChangeActionAC,\r\n    ChangeCurrencyFieldAC,\r\n    ChangeCurrentCurrencyAC,\r\n    CurrencyReducersTypes\r\n} from '../../redux/actions';\r\nimport {connect, ConnectedProps, useDispatch, useSelector} from 'react-redux';\r\nimport {selectAllProps} from \"../../redux/selectors\";\r\n\r\n// const CurrencyEContainer: React.FC<TProps> = props => {\r\nconst CurrencyEContainer: React.FC = () => {\r\n\r\n    // const {\r\n    //     currencies,\r\n    //     currentCurrency,\r\n    //     isBuying,\r\n    //     amountOfBYN,\r\n    //     amountOfCurrency,\r\n    //     setCurrencyAmount,\r\n    //     setAction,\r\n    //     changeCurrency,\r\n    // } = props;\r\n\r\n    // const {\r\n    //     currencies,\r\n    //     currentCurrency,\r\n    //     isBuying,\r\n    //     amountOfBYN,\r\n    //     amountOfCurrency,\r\n    //     ChangeActionAC,\r\n    //     ChangeCurrencyFieldAC,\r\n    //     ChangeCurrentCurrencyAC,\r\n    // } = props;\r\n\r\n\r\n    // const {\r\n    //     currencies,\r\n    //     currentCurrency,\r\n    //     isBuying,\r\n    //     amountOfBYN,\r\n    //     amountOfCurrency,\r\n    // } = props;\r\n\r\n    const dispatch = useDispatch<Dispatch<CurrencyReducersTypes>>();\r\n    const {\r\n        currencies,\r\n        currentCurrency,\r\n        isBuying,\r\n        amountOfBYN,\r\n        amountOfCurrency,\r\n    } = useSelector(selectAllProps);\r\n\r\n    let currencyRate: number = 0;\r\n    const currenciesName = currencies.map((currency: CurrencyType) => {\r\n        if (currency.currencyName === currentCurrency) {\r\n            currencyRate = isBuying ? currency.buyRate : currency.sellRate;\r\n        }\r\n        return currency.currencyName;\r\n    });\r\n\r\n    const changeCurrencyField = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n        let value = e.currentTarget.value;\r\n        if (!isFinite(+value)) return;\r\n        if (e.currentTarget.dataset.currency) {\r\n            const trigger: string = e.currentTarget.dataset.currency;\r\n            if (trigger === 'byn') {\r\n                if (value === '') {\r\n                    // setCurrencyAmount(value, value);\r\n                    // ChangeCurrencyFieldAC(value, value);\r\n                    dispatch(ChangeCurrencyFieldAC(value, value));\r\n                } else {\r\n                    // setCurrencyAmount(value, (+Number(value).toFixed(2) / currencyRate).toFixed(2));\r\n                    // ChangeCurrencyFieldAC(value, (+Number(value).toFixed(2) / currencyRate).toFixed(2));\r\n                    dispatch(ChangeCurrencyFieldAC(value, (+Number(value).toFixed(2) / currencyRate).toFixed(2)));\r\n                }\r\n            } else {\r\n                if (value === '') {\r\n                    // setCurrencyAmount(value, value);\r\n                    // ChangeCurrencyFieldAC(value, value);\r\n                    dispatch(ChangeCurrencyFieldAC(value, value));\r\n                } else {\r\n                    // setCurrencyAmount((+Number(value).toFixed(2) * currencyRate).toFixed(2), value);\r\n                    // ChangeCurrencyFieldAC((+Number(value).toFixed(2) * currencyRate).toFixed(2), value);\r\n                    dispatch(ChangeCurrencyFieldAC((+Number(value).toFixed(2) * currencyRate).toFixed(2), value));\r\n                }\r\n            }\r\n        }\r\n    };\r\n    const changeAction = (e: React.MouseEvent<HTMLSpanElement>) => {\r\n        // e.currentTarget.dataset.action === 'buy' ? setAction(true) : setAction(false);\r\n        // e.currentTarget.dataset.action === 'buy' ? ChangeActionAC(true) : ChangeActionAC(false);\r\n        e.currentTarget.dataset.action === 'buy'\r\n            ? dispatch(ChangeActionAC(true))\r\n            : dispatch(ChangeActionAC(false));\r\n    };\r\n\r\n    const changeCurrentCurrency = (e: React.MouseEvent<HTMLLIElement>) => {\r\n        // e.currentTarget.dataset.currency && changeCurrency(e.currentTarget.dataset.currency);\r\n        // e.currentTarget.dataset.currency && ChangeCurrentCurrencyAC(e.currentTarget.dataset.currency);\r\n        e.currentTarget.dataset.currency && dispatch(ChangeCurrentCurrencyAC(e.currentTarget.dataset.currency));\r\n    };\r\n\r\n    return (\r\n        <React.Fragment>\r\n            <CurrencyExchange\r\n                currenciesName={currenciesName}\r\n                currentCurrency={currentCurrency}\r\n                currencyRate={currencyRate}\r\n                isBuying={isBuying}\r\n                amountOfBYN={amountOfBYN}\r\n                amountOfCurrency={amountOfCurrency}\r\n                changeCurrencyField={changeCurrencyField}\r\n                changeAction={changeAction}\r\n                changeCurrentCurrency={changeCurrentCurrency}\r\n            />\r\n        </React.Fragment>\r\n    );\r\n};\r\n\r\n// const mapStateToProps = ( { currency } : {currency: CurrencyState} ): CurrencyState => {\r\n//     return {\r\n//         currencies: currency.currencies,\r\n//         currentCurrency: currency.currentCurrency,\r\n//         isBuying: currency.isBuying,\r\n//         amountOfBYN: currency.amountOfBYN,\r\n//         amountOfCurrency: currency.amountOfCurrency,\r\n//     };\r\n// };\r\n\r\n// const mapDispatchToProps = (dispatch: Dispatch<CurrencyReducersTypes>) : any => {\r\n//     return {\r\n//         setCurrencyAmount(amountOfBYN: string, amountOfCurrency: string) {\r\n//             dispatch(ChangeCurrencyFieldAC(amountOfBYN, amountOfCurrency));\r\n//         },\r\n//         setAction(isBuying: boolean) {\r\n//             dispatch(ChangeActionAC(isBuying));\r\n//         },\r\n//         changeCurrency(currency: string) {\r\n//             dispatch(ChangeCurrentCurrencyAC(currency));\r\n//         },\r\n//     };\r\n// };\r\n\r\n//const connector = connect(mapStateToProps, mapDispatchToProps);\r\n// const connector = connect(mapStateToProps, {\r\n//     ChangeActionAC,\r\n//     ChangeCurrencyFieldAC,\r\n//     ChangeCurrentCurrencyAC,\r\n// });\r\n\r\n// const connector = connect(mapStateToProps, {});\r\n//\r\n// type TProps = ConnectedProps<typeof connector>;\r\n//\r\n// export default connector(CurrencyEContainer);\r\n\r\nexport default CurrencyEContainer;\r\n\r\n","C:\\Repository\\native_js\\src\\redux\\selectors.ts",[],"C:\\Repository\\native_js\\src\\components\\CurrencyExchange\\CurrencyExchange.tsx",[],{"ruleId":"45","severity":1,"message":"46","line":46,"column":9,"nodeType":"47","messageId":"48","endLine":46,"endColumn":48},{"ruleId":"45","severity":1,"message":"46","line":48,"column":9,"nodeType":"47","messageId":"48","endLine":52,"endColumn":15},{"ruleId":"49","severity":1,"message":"50","line":3,"column":10,"nodeType":"51","messageId":"52","endLine":3,"endColumn":23},{"ruleId":"49","severity":1,"message":"53","line":11,"column":9,"nodeType":"51","messageId":"52","endLine":11,"endColumn":16},{"ruleId":"49","severity":1,"message":"54","line":11,"column":18,"nodeType":"51","messageId":"52","endLine":11,"endColumn":32},"no-fallthrough","Expected a 'break' statement before 'case'.","SwitchCase","case","@typescript-eslint/no-unused-vars","'CurrencyState' is defined but never used.","Identifier","unusedVar","'connect' is defined but never used.","'ConnectedProps' is defined but never used."]