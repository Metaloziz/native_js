[{"C:\\Repository\\native_js\\src\\index.tsx":"1","C:\\Repository\\native_js\\src\\redux\\state.ts":"2","C:\\Repository\\native_js\\src\\App.tsx":"3","C:\\Repository\\native_js\\src\\redux\\currencyReducer.ts":"4","C:\\Repository\\native_js\\src\\lessons\\lesson1\\lesson1.tsx":"5","C:\\Repository\\native_js\\src\\redux\\actions.ts":"6","C:\\Repository\\native_js\\src\\containers\\CurrencyExchangeContainer\\CurrencyEContainer.tsx":"7","C:\\Repository\\native_js\\src\\redux\\selectors.ts":"8","C:\\Repository\\native_js\\src\\components\\CurrencyExchange\\CurrencyExchange.tsx":"9","C:\\Repository\\native_js\\src\\lessons\\lesson4\\Lesson4.tsx":"10","C:\\Repository\\native_js\\src\\lessons\\lesson4\\lesson_4.ts":"11"},{"size":319,"mtime":1609752860000,"results":"12","hashOfConfig":"13"},{"size":286,"mtime":1609751766000,"results":"14","hashOfConfig":"13"},{"size":648,"mtime":1643747643839,"results":"15","hashOfConfig":"13"},{"size":1901,"mtime":1641717656979,"results":"16","hashOfConfig":"13"},{"size":860,"mtime":1609756876000,"results":"17","hashOfConfig":"13"},{"size":2201,"mtime":1641716866825,"results":"18","hashOfConfig":"13"},{"size":6131,"mtime":1641718488341,"results":"19","hashOfConfig":"13"},{"size":110,"mtime":1641718488337,"results":"20","hashOfConfig":"13"},{"size":3871,"mtime":1609757734000,"results":"21","hashOfConfig":"13"},{"size":559,"mtime":1643743259934,"results":"22","hashOfConfig":"13"},{"size":8212,"mtime":1643746969680,"results":"23","hashOfConfig":"13"},{"filePath":"24","messages":"25","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},"1d1oow4",{"filePath":"27","messages":"28","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"29","messages":"30","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"31","messages":"32","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"33","usedDeprecatedRules":"26"},{"filePath":"34","messages":"35","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"36","messages":"37","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"38","messages":"39","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"40","usedDeprecatedRules":"26"},{"filePath":"41","messages":"42","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"43","messages":"44","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"45","messages":"46","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"47","messages":"48","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"49"},"C:\\Repository\\native_js\\src\\index.tsx",[],["50","51"],"C:\\Repository\\native_js\\src\\redux\\state.ts",[],"C:\\Repository\\native_js\\src\\App.tsx",[],"C:\\Repository\\native_js\\src\\redux\\currencyReducer.ts",["52","53"],"import {ACTIONS_TYPE, CurrencyReducersTypes} from './actions';\r\n\r\n\r\nexport type CurrencyType = {\r\n    currencyName: string;\r\n    buyRate: number;\r\n    sellRate: number;\r\n};\r\nexport type CurrencyState = {\r\n    currencies: Array<CurrencyType>;\r\n    currentCurrency: string;\r\n    isBuying: boolean;\r\n    amountOfBYN: string;\r\n    amountOfCurrency: string;\r\n};\r\n\r\nconst initialState: CurrencyState = {\r\n    currencies: [\r\n        {\r\n            currencyName: 'USD',\r\n            buyRate: 2.62,\r\n            sellRate: 2.58,\r\n        },\r\n        {\r\n            currencyName: 'EUR',\r\n            buyRate: 3.1,\r\n            sellRate: 3.06,\r\n        },\r\n        {\r\n            currencyName: 'RUR',\r\n            buyRate: 0.0345,\r\n            sellRate: 0.0341,\r\n        },\r\n    ],\r\n    currentCurrency: 'USD',\r\n    isBuying: true,\r\n    amountOfBYN: '',\r\n    amountOfCurrency: '',\r\n};\r\n\r\nexport const currencyReducer = (state: CurrencyState = initialState, action: CurrencyReducersTypes): CurrencyState => {\r\n\r\n    switch (action.type) {\r\n        case ACTIONS_TYPE.CHANGE_CURRENCY_FIELD_TYPE:\r\n        // Зануляем  amountOfBYN, amountOfCurrency для коректного расчета при смене напраления\r\n        case ACTIONS_TYPE.CHANGE_CHANGE_ACTION:\r\n        // Зануляем  amountOfBYN, amountOfCurrency для коректного расчета при смене напраления\r\n        case ACTIONS_TYPE.CHANGE_CURRENT_CURRENCY:\r\n            return {\r\n                ...state,\r\n                ...action.payload,\r\n            };\r\n        // case ACTIONS_TYPE.CHANGE_CHANGE_ACTION:\r\n        //     return {\r\n        //         ...state,\r\n        //         //@ts-ignore\r\n        //         ...action.payload,\r\n        //         amountOfBYN: '',\r\n        //         amountOfCurrency: '',\r\n        //     };\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n","C:\\Repository\\native_js\\src\\lessons\\lesson1\\lesson1.tsx",[],"C:\\Repository\\native_js\\src\\redux\\actions.ts",[],"C:\\Repository\\native_js\\src\\containers\\CurrencyExchangeContainer\\CurrencyEContainer.tsx",["54","55","56"],"import React from 'react';\r\nimport CurrencyExchange from '../../components/CurrencyExchange/CurrencyExchange';\r\nimport { CurrencyState, CurrencyType } from '../../redux/currencyReducer';\r\nimport { Dispatch } from 'redux';\r\nimport {\r\n    ChangeActionAC,\r\n    ChangeCurrencyFieldAC,\r\n    ChangeCurrentCurrencyAC,\r\n    CurrencyReducersTypes\r\n} from '../../redux/actions';\r\nimport {connect, ConnectedProps, useDispatch, useSelector} from 'react-redux';\r\nimport {selectAllProps} from \"../../redux/selectors\";\r\n\r\n// const CurrencyEContainer: React.FC<TProps> = props => {\r\nconst CurrencyEContainer: React.FC = () => {\r\n\r\n    // const {\r\n    //     currencies,\r\n    //     currentCurrency,\r\n    //     isBuying,\r\n    //     amountOfBYN,\r\n    //     amountOfCurrency,\r\n    //     setCurrencyAmount,\r\n    //     setAction,\r\n    //     changeCurrency,\r\n    // } = props;\r\n\r\n    // const {\r\n    //     currencies,\r\n    //     currentCurrency,\r\n    //     isBuying,\r\n    //     amountOfBYN,\r\n    //     amountOfCurrency,\r\n    //     ChangeActionAC,\r\n    //     ChangeCurrencyFieldAC,\r\n    //     ChangeCurrentCurrencyAC,\r\n    // } = props;\r\n\r\n\r\n    // const {\r\n    //     currencies,\r\n    //     currentCurrency,\r\n    //     isBuying,\r\n    //     amountOfBYN,\r\n    //     amountOfCurrency,\r\n    // } = props;\r\n\r\n    const dispatch = useDispatch<Dispatch<CurrencyReducersTypes>>();\r\n    const {\r\n        currencies,\r\n        currentCurrency,\r\n        isBuying,\r\n        amountOfBYN,\r\n        amountOfCurrency,\r\n    } = useSelector(selectAllProps);\r\n\r\n    let currencyRate: number = 0;\r\n    const currenciesName = currencies.map((currency: CurrencyType) => {\r\n        if (currency.currencyName === currentCurrency) {\r\n            currencyRate = isBuying ? currency.buyRate : currency.sellRate;\r\n        }\r\n        return currency.currencyName;\r\n    });\r\n\r\n    const changeCurrencyField = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n        let value = e.currentTarget.value;\r\n        if (!isFinite(+value)) return;\r\n        if (e.currentTarget.dataset.currency) {\r\n            const trigger: string = e.currentTarget.dataset.currency;\r\n            if (trigger === 'byn') {\r\n                if (value === '') {\r\n                    // setCurrencyAmount(value, value);\r\n                    // ChangeCurrencyFieldAC(value, value);\r\n                    dispatch(ChangeCurrencyFieldAC(value, value));\r\n                } else {\r\n                    // setCurrencyAmount(value, (+Number(value).toFixed(2) / currencyRate).toFixed(2));\r\n                    // ChangeCurrencyFieldAC(value, (+Number(value).toFixed(2) / currencyRate).toFixed(2));\r\n                    dispatch(ChangeCurrencyFieldAC(value, (+Number(value).toFixed(2) / currencyRate).toFixed(2)));\r\n                }\r\n            } else {\r\n                if (value === '') {\r\n                    // setCurrencyAmount(value, value);\r\n                    // ChangeCurrencyFieldAC(value, value);\r\n                    dispatch(ChangeCurrencyFieldAC(value, value));\r\n                } else {\r\n                    // setCurrencyAmount((+Number(value).toFixed(2) * currencyRate).toFixed(2), value);\r\n                    // ChangeCurrencyFieldAC((+Number(value).toFixed(2) * currencyRate).toFixed(2), value);\r\n                    dispatch(ChangeCurrencyFieldAC((+Number(value).toFixed(2) * currencyRate).toFixed(2), value));\r\n                }\r\n            }\r\n        }\r\n    };\r\n    const changeAction = (e: React.MouseEvent<HTMLSpanElement>) => {\r\n        // e.currentTarget.dataset.action === 'buy' ? setAction(true) : setAction(false);\r\n        // e.currentTarget.dataset.action === 'buy' ? ChangeActionAC(true) : ChangeActionAC(false);\r\n        e.currentTarget.dataset.action === 'buy'\r\n            ? dispatch(ChangeActionAC(true))\r\n            : dispatch(ChangeActionAC(false));\r\n    };\r\n\r\n    const changeCurrentCurrency = (e: React.MouseEvent<HTMLLIElement>) => {\r\n        // e.currentTarget.dataset.currency && changeCurrency(e.currentTarget.dataset.currency);\r\n        // e.currentTarget.dataset.currency && ChangeCurrentCurrencyAC(e.currentTarget.dataset.currency);\r\n        e.currentTarget.dataset.currency && dispatch(ChangeCurrentCurrencyAC(e.currentTarget.dataset.currency));\r\n    };\r\n\r\n    return (\r\n        <React.Fragment>\r\n            <CurrencyExchange\r\n                currenciesName={currenciesName}\r\n                currentCurrency={currentCurrency}\r\n                currencyRate={currencyRate}\r\n                isBuying={isBuying}\r\n                amountOfBYN={amountOfBYN}\r\n                amountOfCurrency={amountOfCurrency}\r\n                changeCurrencyField={changeCurrencyField}\r\n                changeAction={changeAction}\r\n                changeCurrentCurrency={changeCurrentCurrency}\r\n            />\r\n        </React.Fragment>\r\n    );\r\n};\r\n\r\n// const mapStateToProps = ( { currency } : {currency: CurrencyState} ): CurrencyState => {\r\n//     return {\r\n//         currencies: currency.currencies,\r\n//         currentCurrency: currency.currentCurrency,\r\n//         isBuying: currency.isBuying,\r\n//         amountOfBYN: currency.amountOfBYN,\r\n//         amountOfCurrency: currency.amountOfCurrency,\r\n//     };\r\n// };\r\n\r\n// const mapDispatchToProps = (dispatch: Dispatch<CurrencyReducersTypes>) : any => {\r\n//     return {\r\n//         setCurrencyAmount(amountOfBYN: string, amountOfCurrency: string) {\r\n//             dispatch(ChangeCurrencyFieldAC(amountOfBYN, amountOfCurrency));\r\n//         },\r\n//         setAction(isBuying: boolean) {\r\n//             dispatch(ChangeActionAC(isBuying));\r\n//         },\r\n//         changeCurrency(currency: string) {\r\n//             dispatch(ChangeCurrentCurrencyAC(currency));\r\n//         },\r\n//     };\r\n// };\r\n\r\n//const connector = connect(mapStateToProps, mapDispatchToProps);\r\n// const connector = connect(mapStateToProps, {\r\n//     ChangeActionAC,\r\n//     ChangeCurrencyFieldAC,\r\n//     ChangeCurrentCurrencyAC,\r\n// });\r\n\r\n// const connector = connect(mapStateToProps, {});\r\n//\r\n// type TProps = ConnectedProps<typeof connector>;\r\n//\r\n// export default connector(CurrencyEContainer);\r\n\r\nexport default CurrencyEContainer;\r\n\r\n","C:\\Repository\\native_js\\src\\redux\\selectors.ts",[],"C:\\Repository\\native_js\\src\\components\\CurrencyExchange\\CurrencyExchange.tsx",[],"C:\\Repository\\native_js\\src\\lessons\\lesson4\\Lesson4.tsx",[],"C:\\Repository\\native_js\\src\\lessons\\lesson4\\lesson_4.ts",["57"],"// console.log('lesson 4');\r\n\r\n// http://latentflip.com/loupe/?code=JC5vbignYnV0dG9uJywgJ2NsaWNrJywgZnVuY3Rpb24gb25DbGljaygpIHsKICAgIHNldFRpbWVvdXQoZnVuY3Rpb24gdGltZXIoKSB7CiAgICAgICAgY29uc29sZS5sb2coJ1lvdSBjbGlja2VkIHRoZSBidXR0b24hJyk7ICAgIAogICAgfSwgMjAwMCk7Cn0pOwoKY29uc29sZS5sb2coIkhpISIpOwoKc2V0VGltZW91dChmdW5jdGlvbiB0aW1lb3V0KCkgewogICAgY29uc29sZS5sb2coIkNsaWNrIHRoZSBidXR0b24hIik7Cn0sIDUwMDApOwoKY29uc29sZS5sb2coIldlbGNvbWUgdG8gbG91cGUuIik7!!!PGJ1dHRvbj5DbGljayBtZSE8L2J1dHRvbj4%3D\r\n// https://jakearchibald.com/2015/tasks-microtasks-queues-and-schedules/\r\n\r\n\r\n// Task 01\r\n// Создайте промис, который постоянно находиться в состоянии pending.\r\n// В конструкторе промиса выведите в консоль сообщение \"Promise is created\".\r\n\r\n\r\n// let promise = new Promise((res, rej) => {\r\n//\r\n//     console.log(\"Promise is created\")\r\n//\r\n// })\r\n//\r\n// console.log(promise)\r\n//\r\n\r\n// Task 02\r\n// Создайте промис, который после создания сразу же переходит в состояние resolve\r\n// и возвращает строку 'Promise Data'\r\n// Получите данные промиса и выведите их в консоль\r\n\r\n// let promise1 = new Promise((res, rej) => {\r\n//\r\n//     // get(sdkjfgskjgnlskfnglkdfnglkdfmlkg).then( (data)\r\n//     //\r\n//     // data.result code\r\n//     // data.data ..... { id : 1}\r\n//     //  resolve ((data.data)=>{\r\n//     //\r\n//     //  return data\r\n//     //\r\n//\r\n//     //  })\r\n//     // )\r\n//\r\n//\r\n//     res('1')\r\n//\r\n// }).then()\r\n\r\n\r\n// console.log(new Promise(() => {\r\n// }))\r\n// console.log(Promise.resolve()) // fulfilled\r\n// console.log(Promise.reject())\r\n\r\n\r\n// let promise = new Promise(function (resolve, reject) {\r\n//     // задача, не требующая времени\r\n//     // мгновенно выдаст результат: 123\r\n//     resolve('1')\r\n// });\r\n//\r\n// promise.then((data) => {\r\n//     console.log(data)\r\n// })\r\n//\r\n// console.log(promise)\r\n\r\n\r\n// Task 03\r\n// Создайте промис, который после создания сразу же переходит в состояние rejected\r\n// и возвращает строку 'Promise Error'\r\n// Получите данные промиса и выведите их в консоль\r\n\r\n// let promise = new Promise(function (resolve, reject) {\r\n//     // задача, не требующая времени\r\n//     // мгновенно выдаст результат: 123\r\n//     reject('Promise Error')\r\n// });\r\n//\r\n// promise.then((data) => {\r\n//     console.log(data)\r\n// }).catch((error) => {\r\n//     console.log(error)\r\n// })\r\n//\r\n// console.log(promise)\r\n\r\n\r\n// Task 04\r\n// Создайте промис, который переходит в состояние resolved через 3с.\r\n// (Используйте setTimeout)\r\n// и возвращает строку 'Promise Data'\r\n// Получите данные промиса и выведите их в консоль\r\n\r\n//\r\n// let promise = new Promise(function (resolve, reject) {\r\n//\r\n//     setTimeout(() => {\r\n//         resolve('Promise Data')\r\n//     }, 3000)\r\n//\r\n//\r\n// });\r\n//\r\n// promise.then((data) => {\r\n//     console.log(data)\r\n// }).catch((error) => {\r\n//     console.log(error)\r\n// })\r\n//\r\n// console.log(promise)\r\n\r\n\r\n// Task 05\r\n// Создайте литерал объекта handlePromise со следующими свойствами:\r\n// promise, resolve, reject, onSuccess, onError\r\n// Проинициализируйте первые три свойства null,\r\n// а последние два функциями, которые принимают один параметр и выводят\r\n// в консоль сообщения: первая - `Promise is resolved with data: ${paramName}`\r\n// вторая - `Promise is rejected with error: ${paramName}`\r\n// Создайте три обработчика события click для кнопок \"Create Promise\", \"Resolve Promise\", \"Reject Promise\".\r\n// Первый обработчик, создает промис, заполняет первые три свойства,\r\n// описаного выше объекта: свойство promise получает новый созданный промис,\r\n// свойства resolve и reject получают ссылки на соответствующие функции\r\n// resolve и reject. Следующие два обработчика запускают методы resolve и reject.\r\n\r\n\r\n// let\r\n//\r\n// type handlePromiseType = {\r\n//     promise: null | Promise<any>\r\n//     resolve: null | Function\r\n//     reject: null | Function\r\n//     onSuccess: (data: string) => void\r\n//     onError: (data: string) => void\r\n// }\r\n//\r\n// export let handlePromise: handlePromiseType = {\r\n//     promise: null,\r\n//     resolve: null,\r\n//     reject: null,\r\n//     onSuccess: (paramName: string) => {\r\n//         console.log(`Promise is resolved with data: ${paramName}`)\r\n//     },\r\n//     onError: (paramName: string) => {\r\n//         console.log(`Promise is rejected with error: ${paramName}`)\r\n//     },\r\n// }\r\n//\r\n//\r\n// export const CreatePromise = () => {\r\n//\r\n//     const somePromise: Promise<any> = new Promise((res, rej) => {\r\n//\r\n//         handlePromise.resolve = res\r\n//         handlePromise.reject = rej\r\n//\r\n//     })\r\n//\r\n//     handlePromise.promise = somePromise\r\n//     handlePromise.promise\r\n//         .then(handlePromise.onSuccess)\r\n//         .catch(handlePromise.onError)\r\n//\r\n//     console.log(handlePromise)\r\n//\r\n// }\r\n// export const ResolvePromise = () => {\r\n//\r\n//     handlePromise.resolve && handlePromise.resolve('res')\r\n//     // console.log(handlePromise)\r\n//\r\n// }\r\n// export const RejectPromise = () => {\r\n//     handlePromise.reject && handlePromise.reject('rej')\r\n//     // console.log(handlePromise)\r\n// }\r\n\r\n\r\n// Task 06\r\n// Создайте промис, который через 1 с возвращает строку \"My name is\".\r\n// Создайте функцию onSuccess, которая получает один параметр,\r\n// прибавляет к нему Ваше имя и возвращает новую строку из функции\r\n// Создайте функцию print, которая выводит в консоль значение своего параметра\r\n// Добавьте два метода then и передайте созданные функции.\r\n\r\n//\r\n// let onSuccess = (oneParametr: unknown) => {\r\n//\r\n//     return oneParametr + 'Andrew'\r\n// }\r\n//\r\n// const print = (secondParam: string) => {\r\n//     console.log(secondParam)\r\n// }\r\n//\r\n// let promis = new Promise((res, rej) => {\r\n//\r\n//     let ssss: any = \"My name is \"\r\n//\r\n//     // setTimeout(() => {\r\n//         res(ssss)\r\n//     // }, 1000)\r\n//\r\n// }).then((data) => {\r\n//     console.log(data)\r\n//     return onSuccess(data)\r\n// }).then(print)\r\n//\r\n\r\n\r\n// Task 7\r\n// Создайте три промиса. Первый промис возвращает объект { name: \"Anna\" } через 2с,\r\n// второй промис возвращает объект {age: 16} через 3 с, а третий {city: ''} через 4с.\r\n// Получите результаты работы промисов, объедините свойства объектов\r\n// и выведите в консоль {name: 'Anna', age: 16, city: ''}\r\n\r\nlet promise1 = new Promise((resolve, reject) => {\r\n\r\n    setTimeout(resolve, 2000, {name: \"Anna\"})\r\n\r\n})\r\n\r\nlet promise2 = new Promise((resolve, reject) => {\r\n\r\n    setTimeout(resolve, 3000, {age: 16})\r\n\r\n})\r\nlet promise3 = new Promise((resolve, reject) => {\r\n\r\n    setTimeout(resolve, 4000, {city: ''})\r\n\r\n})\r\nlet promise4 = new Promise((resolve, reject) => {\r\n\r\n    setTimeout(resolve, 4000, {\r\n        Nastya: 'Robot',\r\n        location: {\r\n            country: 'BL',\r\n            city: \"Minsk\",\r\n        }\r\n    })\r\n\r\n})\r\n\r\n\r\nPromise.all([promise1, promise2, promise3, promise4]).then((data: any) => {\r\n\r\n\r\n    console.log(Object.assign({}, ...data))\r\n})\r\n\r\n\r\n// just a plug\r\nexport default () => {\r\n};",{"ruleId":"58","replacedBy":"59"},{"ruleId":"60","replacedBy":"61"},{"ruleId":"62","severity":1,"message":"63","line":46,"column":9,"nodeType":"64","messageId":"65","endLine":46,"endColumn":48},{"ruleId":"62","severity":1,"message":"63","line":48,"column":9,"nodeType":"64","messageId":"65","endLine":52,"endColumn":15},{"ruleId":"66","severity":1,"message":"67","line":3,"column":10,"nodeType":"68","messageId":"69","endLine":3,"endColumn":23},{"ruleId":"66","severity":1,"message":"70","line":11,"column":9,"nodeType":"68","messageId":"69","endLine":11,"endColumn":16},{"ruleId":"66","severity":1,"message":"71","line":11,"column":18,"nodeType":"68","messageId":"69","endLine":11,"endColumn":32},{"ruleId":"72","severity":1,"message":"73","line":251,"column":1,"nodeType":"74","endLine":252,"endColumn":3},"no-native-reassign",["75"],"no-negated-in-lhs",["76"],"no-fallthrough","Expected a 'break' statement before 'case'.","SwitchCase","case","@typescript-eslint/no-unused-vars","'CurrencyState' is defined but never used.","Identifier","unusedVar","'connect' is defined but never used.","'ConnectedProps' is defined but never used.","import/no-anonymous-default-export","Assign arrow function to a variable before exporting as module default","ExportDefaultDeclaration","no-global-assign","no-unsafe-negation"]